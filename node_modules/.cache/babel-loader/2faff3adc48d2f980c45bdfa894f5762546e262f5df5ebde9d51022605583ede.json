{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport function parseBeaconMessage(message) {\n  const regex = /Message (\\d+).*D\\[([^\\]]+)\\].*L\\[([-\\d.]+),([-\\d.]+),([-\\d.]+)\\].*R\\[([-\\d.]+),([-\\d.]+),([-\\d.]+)\\].*RD\\[([^\\]]+)\\]/;\n  const match = message.match(regex);\n  if (!match) return null;\n  const [, messageId,, x, y, z, yaw, pitch, roll, realTimestamp] = match;\n  return {\n    messageId: parseInt(messageId),\n    timestamp: realTimestamp,\n    position: {\n      x: parseFloat(x),\n      y: parseFloat(y),\n      z: parseFloat(z)\n    },\n    rotation: {\n      yaw: parseFloat(yaw),\n      pitch: parseFloat(pitch),\n      roll: parseFloat(roll)\n    }\n  };\n}\nexport function useBeaconData(filePath) {\n  _s();\n  const [beaconDataArray, setBeaconDataArray] = useState([]);\n  useEffect(() => {\n    fetch(filePath).then(response => response.text()).then(text => {\n      const messages = text.split('Message').filter(msg => msg.trim());\n      const parsedData = messages.map(msg => parseBeaconMessage('Message' + msg)).filter(data => data !== null);\n      setBeaconDataArray(parsedData);\n      console.log(\"Data loaded successfully. Parsed\", parsedData.length, \"messages.\");\n    }).catch(error => console.error('Error loading beacon data:', error));\n  }, [filePath]);\n  return beaconDataArray;\n}\n_s(useBeaconData, \"eiCQkLY5t3oKkb5duiDzwWRxPjk=\");","map":{"version":3,"names":["useState","useEffect","parseBeaconMessage","message","regex","match","messageId","x","y","z","yaw","pitch","roll","realTimestamp","parseInt","timestamp","position","parseFloat","rotation","useBeaconData","filePath","_s","beaconDataArray","setBeaconDataArray","fetch","then","response","text","messages","split","filter","msg","trim","parsedData","map","data","console","log","length","catch","error"],"sources":["/Users/leofang/Desktop/Hackthon/src/components/DataParser.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport interface BeaconData {\n    messageId: number;\n    timestamp: string;\n    position: {\n        x: number;\n        y: number;\n        z: number;\n    };\n    rotation: {\n        yaw: number;\n        pitch: number;\n        roll: number;\n    };\n}\n\nexport function parseBeaconMessage(message: string): BeaconData | null {\n    const regex = /Message (\\d+).*D\\[([^\\]]+)\\].*L\\[([-\\d.]+),([-\\d.]+),([-\\d.]+)\\].*R\\[([-\\d.]+),([-\\d.]+),([-\\d.]+)\\].*RD\\[([^\\]]+)\\]/;\n    const match = message.match(regex);\n\n    if (!match) return null;\n\n    const [, messageId, , x, y, z, yaw, pitch, roll, realTimestamp] = match;\n\n    return {\n        messageId: parseInt(messageId),\n        timestamp: realTimestamp,\n        position: {\n            x: parseFloat(x),\n            y: parseFloat(y),\n            z: parseFloat(z)\n        },\n        rotation: {\n            yaw: parseFloat(yaw),\n            pitch: parseFloat(pitch),\n            roll: parseFloat(roll)\n        }\n    };\n}\n\nexport function useBeaconData(filePath: string) {\n    const [beaconDataArray, setBeaconDataArray] = useState<BeaconData[]>([]);\n\n    useEffect(() => {\n        fetch(filePath)\n            .then(response => response.text())\n            .then(text => {\n                const messages = text.split('Message').filter(msg => msg.trim());\n                const parsedData = messages.map(msg => parseBeaconMessage('Message' + msg)).filter((data): data is BeaconData => data !== null);\n                setBeaconDataArray(parsedData);\n                console.log(\"Data loaded successfully. Parsed\", parsedData.length, \"messages.\");\n            })\n            .catch(error => console.error('Error loading beacon data:', error));\n    }, [filePath]);\n\n    return beaconDataArray;\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAiB3C,OAAO,SAASC,kBAAkBA,CAACC,OAAe,EAAqB;EACnE,MAAMC,KAAK,GAAG,sHAAsH;EACpI,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK,CAACD,KAAK,CAAC;EAElC,IAAI,CAACC,KAAK,EAAE,OAAO,IAAI;EAEvB,MAAM,GAAGC,SAAS,GAAIC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,CAAC,GAAGR,KAAK;EAEvE,OAAO;IACHC,SAAS,EAAEQ,QAAQ,CAACR,SAAS,CAAC;IAC9BS,SAAS,EAAEF,aAAa;IACxBG,QAAQ,EAAE;MACNT,CAAC,EAAEU,UAAU,CAACV,CAAC,CAAC;MAChBC,CAAC,EAAES,UAAU,CAACT,CAAC,CAAC;MAChBC,CAAC,EAAEQ,UAAU,CAACR,CAAC;IACnB,CAAC;IACDS,QAAQ,EAAE;MACNR,GAAG,EAAEO,UAAU,CAACP,GAAG,CAAC;MACpBC,KAAK,EAAEM,UAAU,CAACN,KAAK,CAAC;MACxBC,IAAI,EAAEK,UAAU,CAACL,IAAI;IACzB;EACJ,CAAC;AACL;AAEA,OAAO,SAASO,aAAaA,CAACC,QAAgB,EAAE;EAAAC,EAAA;EAC5C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAe,EAAE,CAAC;EAExEC,SAAS,CAAC,MAAM;IACZuB,KAAK,CAACJ,QAAQ,CAAC,CACVK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACE,IAAI,IAAI;MACV,MAAMC,QAAQ,GAAGD,IAAI,CAACE,KAAK,CAAC,SAAS,CAAC,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;MAChE,MAAMC,UAAU,GAAGL,QAAQ,CAACM,GAAG,CAACH,GAAG,IAAI7B,kBAAkB,CAAC,SAAS,GAAG6B,GAAG,CAAC,CAAC,CAACD,MAAM,CAAEK,IAAI,IAAyBA,IAAI,KAAK,IAAI,CAAC;MAC/HZ,kBAAkB,CAACU,UAAU,CAAC;MAC9BG,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEJ,UAAU,CAACK,MAAM,EAAE,WAAW,CAAC;IACnF,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC,CAAC;EAC3E,CAAC,EAAE,CAACpB,QAAQ,CAAC,CAAC;EAEd,OAAOE,eAAe;AAC1B;AAACD,EAAA,CAhBeF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}