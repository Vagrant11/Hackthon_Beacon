{"ast":null,"code":"export function parseBeaconMessage(message) {\n  const regex = /Message (\\d+).*D\\[([^\\]]+)\\].*L\\[([-\\d.]+),([-\\d.]+),([-\\d.]+)\\].*R\\[([-\\d.]+),([-\\d.]+),([-\\d.]+)\\].*RD\\[([^\\]]+)\\]/;\n  const match = message.match(regex);\n  if (!match) {\n    throw new Error(\"Invalid message format\");\n  }\n  const [, messageId, timestamp, x, y, z, yaw, pitch, roll, realTimestamp] = match;\n  return {\n    messageId: parseInt(messageId),\n    timestamp: realTimestamp,\n    position: {\n      x: parseFloat(x),\n      y: parseFloat(y),\n      z: parseFloat(z)\n    },\n    rotation: {\n      yaw: parseFloat(yaw),\n      pitch: parseFloat(pitch),\n      roll: parseFloat(roll)\n    }\n  };\n}","map":{"version":3,"names":["parseBeaconMessage","message","regex","match","Error","messageId","timestamp","x","y","z","yaw","pitch","roll","realTimestamp","parseInt","position","parseFloat","rotation"],"sources":["/Users/leofang/Desktop/Hackthon/src/components/DataParser.ts"],"sourcesContent":["export interface BeaconData {\n    messageId: number;\n    timestamp: string;\n    position: {\n        x: number;\n        y: number;\n        z: number;\n    };\n    rotation: {\n        yaw: number;\n        pitch: number;\n        roll: number;\n    };\n}\n\nexport function parseBeaconMessage(message: string): BeaconData {\n    const regex = /Message (\\d+).*D\\[([^\\]]+)\\].*L\\[([-\\d.]+),([-\\d.]+),([-\\d.]+)\\].*R\\[([-\\d.]+),([-\\d.]+),([-\\d.]+)\\].*RD\\[([^\\]]+)\\]/;\n\n    const match = message.match(regex);\n\n    if (!match) {\n        throw new Error(\"Invalid message format\");\n    }\n\n    const [\n        ,\n        messageId,\n        timestamp,\n        x,\n        y,\n        z,\n        yaw,\n        pitch,\n        roll,\n        realTimestamp\n    ] = match;\n\n    return {\n        messageId: parseInt(messageId),\n        timestamp: realTimestamp,\n        position: {\n            x: parseFloat(x),\n            y: parseFloat(y),\n            z: parseFloat(z)\n        },\n        rotation: {\n            yaw: parseFloat(yaw),\n            pitch: parseFloat(pitch),\n            roll: parseFloat(roll)\n        }\n    };\n}"],"mappings":"AAeA,OAAO,SAASA,kBAAkBA,CAACC,OAAe,EAAc;EAC5D,MAAMC,KAAK,GAAG,sHAAsH;EAEpI,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK,CAACD,KAAK,CAAC;EAElC,IAAI,CAACC,KAAK,EAAE;IACR,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC7C;EAEA,MAAM,GAEFC,SAAS,EACTC,SAAS,EACTC,CAAC,EACDC,CAAC,EACDC,CAAC,EACDC,GAAG,EACHC,KAAK,EACLC,IAAI,EACJC,aAAa,CAChB,GAAGV,KAAK;EAET,OAAO;IACHE,SAAS,EAAES,QAAQ,CAACT,SAAS,CAAC;IAC9BC,SAAS,EAAEO,aAAa;IACxBE,QAAQ,EAAE;MACNR,CAAC,EAAES,UAAU,CAACT,CAAC,CAAC;MAChBC,CAAC,EAAEQ,UAAU,CAACR,CAAC,CAAC;MAChBC,CAAC,EAAEO,UAAU,CAACP,CAAC;IACnB,CAAC;IACDQ,QAAQ,EAAE;MACNP,GAAG,EAAEM,UAAU,CAACN,GAAG,CAAC;MACpBC,KAAK,EAAEK,UAAU,CAACL,KAAK,CAAC;MACxBC,IAAI,EAAEI,UAAU,CAACJ,IAAI;IACzB;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}